public class MonthsExampleCHM92Hash {
  /*
   * To reduce space usage, remove the key list if it is not needed. The
   * list is not needed for hash table operation. If you hash a value
   * which is not in the table (which you shouldn't), the only way to
   * detect the miss is to compare against the corresponding table index.
   */
  public static final String[] KEY_LIST = {
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  };

  private static final int[][] TABLE_1 = {
    {
      18, 14, 23, 2, 1, 4, 10, 13,
      4, 3, 15, 12, 2, 24, 14, 10,
      2, 14, 4, 7, 19, 7, 1, 23,
      24, 24, 12, 18, 22, 5, 17, 23,
      23, 23, 0, 3, 18, 23, 2, 20,
      15, 12, 13, 5, 3, 5, 17, 10,
      14, 8, 11, 22, 21, 6, 24, 14,
      5, 0, 0, 1, 3, 0, 23, 18

    },
    {
      4, 13, 12, 14, 7, 19, 23, 14,
      18, 7, 0, 13, 7, 21, 24, 22,
      19, 18, 22, 22, 3, 15, 21, 9,
      22, 23, 15, 16, 16, 14, 12, 9,
      5, 5, 5, 8, 11, 8, 14, 2,
      15, 10, 12, 18, 21, 23, 2, 4,
      0, 4, 12, 9, 7, 12, 7, 14,
      16, 13, 10, 13, 7, 14, 9, 0

    },
    {
      8, 22, 8, 16, 0, 0, 21, 15,
      12, 0, 12, 22, 17, 3, 15, 13,
      24, 19, 20, 13, 14, 24, 7, 21,
      1, 22, 21, 19, 19, 11, 17, 14,
      19, 8, 11, 5, 9, 17, 11, 20,
      17, 12, 8, 15, 18, 15, 15, 5,
      11, 0, 20, 6, 9, 21, 19, 2,
      15, 10, 4, 1, 8, 13, 13, 20

    },
    {
      19, 6, 7, 12, 13, 12, 24, 3,
      11, 20, 21, 10, 4, 14, 18, 7,
      15, 8, 9, 3, 6, 12, 1, 14,
      2, 12, 7, 1, 23, 12, 12, 18,
      1, 16, 22, 21, 24, 1, 9, 22,
      14, 13, 10, 11, 17, 11, 24, 11,
      0, 11, 6, 16, 21, 20, 13, 23,
      10, 17, 11, 6, 4, 10, 10, 6

    },
    {
      22, 15, 10, 14, 20, 16, 1, 10,
      22, 24, 9, 3, 16, 15, 15, 1,
      16, 21, 16, 12, 11, 22, 1, 6,
      5, 15, 12, 3, 9, 0, 18, 0,
      21, 2, 6, 19, 8, 23, 6, 17,
      18, 18, 18, 16, 13, 20, 8, 19,
      21, 6, 0, 20, 4, 12, 7, 24,
      15, 14, 6, 21, 10, 24, 13, 21

    },
    {
      7, 18, 17, 8, 9, 4, 7, 12,
      22, 8, 5, 7, 14, 20, 14, 3,
      18, 12, 8, 4, 17, 15, 13, 3,
      15, 24, 16, 21, 16, 9, 22, 14,
      17, 4, 3, 24, 24, 10, 15, 11,
      20, 24, 19, 18, 20, 11, 23, 7,
      11, 2, 12, 1, 22, 10, 1, 23,
      5, 0, 6, 0, 5, 6, 12, 10

    },
    {
      24, 15, 22, 23, 9, 8, 11, 18,
      7, 2, 8, 23, 12, 20, 15, 6,
      3, 13, 9, 24, 6, 6, 15, 13,
      17, 13, 8, 7, 13, 22, 11, 24,
      10, 12, 4, 13, 23, 20, 19, 23,
      4, 5, 19, 24, 5, 24, 21, 15,
      10, 18, 23, 14, 24, 5, 24, 5,
      10, 22, 17, 18, 19, 23, 22, 14

    },
    {
      19, 21, 2, 5, 9, 7, 14, 10,
      1, 16, 3, 18, 3, 1, 5, 11,
      12, 17, 18, 3, 13, 13, 11, 1,
      12, 11, 6, 4, 10, 19, 8, 3,
      7, 2, 13, 15, 2, 11, 6, 20,
      1, 21, 23, 11, 3, 16, 23, 6,
      8, 20, 16, 12, 24, 13, 9, 14,
      8, 17, 1, 1, 15, 17, 22, 21

    }
  };

  private static final int[][] TABLE_2 = {
    {
      19, 1, 7, 4, 15, 1, 11, 13,
      7, 16, 16, 9, 11, 0, 0, 15,
      15, 17, 19, 3, 6, 1, 6, 20,
      19, 5, 15, 16, 14, 15, 6, 3,
      14, 17, 9, 24, 11, 15, 6, 1,
      20, 9, 2, 21, 3, 2, 23, 10,
      6, 23, 5, 16, 22, 14, 6, 7,
      15, 3, 24, 5, 15, 5, 20, 2

    },
    {
      24, 9, 10, 14, 15, 14, 5, 20,
      19, 16, 5, 12, 10, 22, 24, 2,
      22, 8, 19, 17, 14, 14, 5, 6,
      14, 5, 19, 20, 13, 21, 10, 17,
      2, 9, 9, 19, 10, 19, 15, 24,
      17, 5, 10, 14, 18, 23, 0, 4,
      1, 6, 14, 17, 4, 19, 6, 17,
      0, 16, 2, 5, 5, 21, 1, 20

    },
    {
      24, 15, 10, 20, 2, 5, 10, 12,
      12, 13, 20, 16, 9, 0, 13, 15,
      21, 10, 10, 10, 22, 2, 12, 15,
      22, 17, 23, 0, 7, 14, 9, 12,
      3, 7, 5, 8, 14, 24, 19, 21,
      12, 6, 15, 17, 24, 18, 5, 6,
      4, 5, 8, 2, 21, 9, 13, 11,
      11, 7, 18, 5, 23, 20, 1, 10

    },
    {
      9, 24, 7, 18, 12, 20, 0, 2,
      23, 3, 22, 8, 21, 16, 11, 19,
      19, 11, 3, 16, 14, 16, 4, 10,
      22, 21, 0, 6, 1, 21, 19, 5,
      18, 23, 0, 2, 10, 18, 8, 2,
      9, 14, 7, 8, 14, 11, 14, 23,
      0, 16, 14, 8, 19, 10, 22, 19,
      18, 5, 24, 12, 3, 5, 19, 4

    },
    {
      20, 21, 5, 4, 4, 4, 22, 5,
      18, 20, 4, 12, 0, 20, 8, 20,
      0, 6, 12, 20, 9, 17, 6, 23,
      17, 24, 3, 9, 9, 5, 11, 5,
      21, 15, 20, 5, 17, 10, 2, 19,
      3, 9, 5, 0, 7, 11, 10, 14,
      14, 15, 11, 0, 19, 3, 16, 20,
      3, 8, 1, 7, 14, 21, 6, 13

    },
    {
      4, 21, 1, 24, 2, 8, 4, 12,
      20, 7, 14, 3, 16, 4, 1, 2,
      21, 14, 2, 16, 11, 3, 23, 4,
      18, 6, 21, 2, 1, 0, 4, 1,
      2, 19, 18, 19, 5, 4, 2, 1,
      16, 8, 13, 16, 3, 1, 24, 21,
      1, 19, 24, 22, 15, 8, 22, 20,
      20, 9, 17, 1, 23, 15, 16, 15

    },
    {
      13, 13, 5, 11, 1, 12, 2, 20,
      14, 10, 13, 15, 2, 6, 8, 22,
      15, 8, 16, 2, 14, 6, 14, 20,
      8, 3, 21, 24, 17, 7, 1, 10,
      20, 12, 2, 22, 13, 11, 6, 22,
      17, 17, 22, 21, 5, 20, 23, 10,
      15, 20, 13, 16, 4, 18, 7, 22,
      8, 0, 24, 13, 21, 8, 12, 12

    },
    {
      9, 4, 23, 19, 11, 22, 5, 5,
      22, 8, 20, 13, 9, 15, 16, 14,
      16, 9, 2, 15, 23, 6, 22, 14,
      6, 1, 14, 12, 19, 22, 9, 4,
      10, 11, 5, 16, 0, 2, 3, 10,
      23, 3, 6, 16, 20, 4, 24, 16,
      18, 8, 17, 4, 15, 18, 12, 16,
      1, 15, 7, 10, 4, 23, 11, 4

    }
  };

  private static final int[] G = {
    0, 0, 0, 0, 0, 0, 0, 11,
    7, 0, 3, 0, 2, 2, 4, 9,
    0, 10, 10, 0, 0, 0, 0, 0,
    1
  };

  /**
   * Determines the hash code of the given string, which is equal to its
   * index in the key list.
   * Precondition: the given string is within the key list.
   * 
   * @param key
   *   the string for which to calculate a hash
   * @return
   *   the hash code of the given string
   */
  public static int hash(String key) {
    int i, u, v;

    for (u = v = i = 0; i < key.length(); ++i) {
      u = (u + TABLE_1[i % 8][key.charAt(i) % 64])
            % 25;
      v = ((v + TABLE_2[i % 8][key.charAt(i) % 64])
            % 25);
    }

    return (G[u] + G[v]) % 12;
  }

  /*
   * Example main method to test the hash function. Every key should hash
   * to its own index. An error message will be printed if this doesn't
   * hold.
   * 
   * Uncomment to use.
   */
  public static void main(String[] args) {
    for (int i = 0; i < KEY_LIST.length; ++i) {
      int h = hash(KEY_LIST[i]);
      if (h != i) {
        System.err.printf("Error while hashing \"%s\": expected %d but was %d%n", KEY_LIST[i], i, h);
      }
    }
  }
}
