/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tracetest_TYPES_H
#define tracetest_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace jaegertracing { namespace crossdock { namespace thrift {

struct Transport {
  enum type {
    HTTP = 0,
    TCHANNEL = 1,
    DUMMY = 2
  };
};

extern const std::map<int, const char*> _Transport_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Transport::type& val);

class Downstream;

class StartTraceRequest;

class JoinTraceRequest;

class ObservedSpan;

class TraceResponse;

typedef struct _Downstream__isset {
  _Downstream__isset() : downstream(false) {}
  bool downstream :1;
} _Downstream__isset;

class Downstream : public virtual ::apache::thrift::TBase {
 public:

  Downstream(const Downstream&);
  Downstream& operator=(const Downstream&);
  Downstream() : serviceName(), serverRole(), host(), port(), transport((Transport::type)0) {
  }

  virtual ~Downstream() throw();
  std::string serviceName;
  std::string serverRole;
  std::string host;
  std::string port;
  Transport::type transport;
  std::shared_ptr<Downstream> downstream;

  _Downstream__isset __isset;

  void __set_serviceName(const std::string& val);

  void __set_serverRole(const std::string& val);

  void __set_host(const std::string& val);

  void __set_port(const std::string& val);

  void __set_transport(const Transport::type val);

  void __set_downstream(const std::shared_ptr<Downstream>& val);

  bool operator == (const Downstream & rhs) const
  {
    if (!(serviceName == rhs.serviceName))
      return false;
    if (!(serverRole == rhs.serverRole))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(transport == rhs.transport))
      return false;
    if (__isset.downstream != rhs.__isset.downstream)
      return false;
    else if (__isset.downstream && !(*downstream == *rhs.downstream))
      return false;
    return true;
  }
  bool operator != (const Downstream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Downstream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Downstream &a, Downstream &b);

std::ostream& operator<<(std::ostream& out, const Downstream& obj);


class StartTraceRequest : public virtual ::apache::thrift::TBase {
 public:

  StartTraceRequest(const StartTraceRequest&);
  StartTraceRequest& operator=(const StartTraceRequest&);
  StartTraceRequest() : serverRole(), sampled(0), baggage() {
  }

  virtual ~StartTraceRequest() throw();
  std::string serverRole;
  bool sampled;
  std::string baggage;
  Downstream downstream;

  void __set_serverRole(const std::string& val);

  void __set_sampled(const bool val);

  void __set_baggage(const std::string& val);

  void __set_downstream(const Downstream& val);

  bool operator == (const StartTraceRequest & rhs) const
  {
    if (!(serverRole == rhs.serverRole))
      return false;
    if (!(sampled == rhs.sampled))
      return false;
    if (!(baggage == rhs.baggage))
      return false;
    if (!(downstream == rhs.downstream))
      return false;
    return true;
  }
  bool operator != (const StartTraceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StartTraceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StartTraceRequest &a, StartTraceRequest &b);

std::ostream& operator<<(std::ostream& out, const StartTraceRequest& obj);

typedef struct _JoinTraceRequest__isset {
  _JoinTraceRequest__isset() : downstream(false) {}
  bool downstream :1;
} _JoinTraceRequest__isset;

class JoinTraceRequest : public virtual ::apache::thrift::TBase {
 public:

  JoinTraceRequest(const JoinTraceRequest&);
  JoinTraceRequest& operator=(const JoinTraceRequest&);
  JoinTraceRequest() : serverRole() {
  }

  virtual ~JoinTraceRequest() throw();
  std::string serverRole;
  Downstream downstream;

  _JoinTraceRequest__isset __isset;

  void __set_serverRole(const std::string& val);

  void __set_downstream(const Downstream& val);

  bool operator == (const JoinTraceRequest & rhs) const
  {
    if (!(serverRole == rhs.serverRole))
      return false;
    if (__isset.downstream != rhs.__isset.downstream)
      return false;
    else if (__isset.downstream && !(downstream == rhs.downstream))
      return false;
    return true;
  }
  bool operator != (const JoinTraceRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JoinTraceRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JoinTraceRequest &a, JoinTraceRequest &b);

std::ostream& operator<<(std::ostream& out, const JoinTraceRequest& obj);


class ObservedSpan : public virtual ::apache::thrift::TBase {
 public:

  ObservedSpan(const ObservedSpan&);
  ObservedSpan& operator=(const ObservedSpan&);
  ObservedSpan() : traceId(), sampled(0), baggage() {
  }

  virtual ~ObservedSpan() throw();
  std::string traceId;
  bool sampled;
  std::string baggage;

  void __set_traceId(const std::string& val);

  void __set_sampled(const bool val);

  void __set_baggage(const std::string& val);

  bool operator == (const ObservedSpan & rhs) const
  {
    if (!(traceId == rhs.traceId))
      return false;
    if (!(sampled == rhs.sampled))
      return false;
    if (!(baggage == rhs.baggage))
      return false;
    return true;
  }
  bool operator != (const ObservedSpan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ObservedSpan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ObservedSpan &a, ObservedSpan &b);

std::ostream& operator<<(std::ostream& out, const ObservedSpan& obj);

typedef struct _TraceResponse__isset {
  _TraceResponse__isset() : span(false), downstream(false) {}
  bool span :1;
  bool downstream :1;
} _TraceResponse__isset;

class TraceResponse : public virtual ::apache::thrift::TBase {
 public:

  TraceResponse(const TraceResponse&);
  TraceResponse& operator=(const TraceResponse&);
  TraceResponse() : notImplementedError() {
  }

  virtual ~TraceResponse() throw();
  ObservedSpan span;
  std::shared_ptr<TraceResponse> downstream;
  std::string notImplementedError;

  _TraceResponse__isset __isset;

  void __set_span(const ObservedSpan& val);

  void __set_downstream(const std::shared_ptr<TraceResponse>& val);

  void __set_notImplementedError(const std::string& val);

  bool operator == (const TraceResponse & rhs) const
  {
    if (__isset.span != rhs.__isset.span)
      return false;
    else if (__isset.span && !(span == rhs.span))
      return false;
    if (__isset.downstream != rhs.__isset.downstream)
      return false;
    else if (__isset.downstream && !(*downstream == *rhs.downstream))
      return false;
    if (!(notImplementedError == rhs.notImplementedError))
      return false;
    return true;
  }
  bool operator != (const TraceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TraceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TraceResponse &a, TraceResponse &b);

std::ostream& operator<<(std::ostream& out, const TraceResponse& obj);

}}} // namespace

#endif
